# .github/workflows/build-windows.yml

name: Build for Windows

# 控制工作流的触发条件
on:
  # 允许你从 Actions 标签页手动触发此工作流
  workflow_dispatch:

jobs:
  build-windows:
    # 指定运行器环境为最新的 Windows Server
    runs-on: windows-latest

    steps:
      # 第一步：检出你的代码
      # 使用 actions/checkout@v4 来获取你仓库中的代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 为了确保获取所有子模块（submodules），这在一些复杂项目中是必要的
          submodules: 'recursive'

      # 第二步：安装 Rust 工具链
      # 使用 dtolnay/rust-toolchain@stable 来安装稳定版的 Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 第三步：安装 LLVM (一个编译工具集，某些依赖项可能需要)
      - name: Install LLVM
        uses: urcomputeringpal/actions-setup-llvm@v1.4.0

      # 第四步：缓存依赖项
      # 这是一个优化步骤，可以大大加快后续的编译速度
      # 它会缓存 cargo 下载的依赖包
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # 第五步：编译项目
      # 这是核心步骤，使用 cargo 来构建发布版本
      - name: Build Phira
        run: cargo build --release --package phira
        env:
          # 设置一些编译时需要的环境变量
          RUSTFLAGS: "-C target-feature=+crt-static"
          VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
          VCPKGRS_DYNAMIC: "1"

      # 第六步：准备打包文件
      # 将编译好的 .exe 文件和其他必要的资源文件放到一个文件夹里，准备上传
      - name: Package assets
        run: |
          mkdir release
          cp target/release/phira.exe release/
          cp -r assets release/

      # 第七步：上传构建产物
      # 使用 actions/upload-artifact@v4 将 release 文件夹打包
      # 这样你就可以在工作流运行结束后下载它了
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # 设置下载文件的名字
          name: phira-windows-build
          # 指定要上传的文件夹路径
          path: release/
